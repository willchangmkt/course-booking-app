{"ast":null,"code":"// 這個 不是 React 的 class component，\n// 而是一個 普通的 JavaScript 類別（class），\n// 用來封裝跟 Course 有關的 API 呼叫邏輯，\n// 屬於 service 層邏輯，與 UI 無關。\n\nimport axios from \"axios\";\n// 要post 到course 這個api\nconst API_URL = \"http://localhost:8080/api/courses\";\nclass CourseService {\n  // 要製作新的課程 要給title, description, price 所以在這個CourseService 第一個可以做的動作就是post\n  post(title, description, price) {\n    // 要post 的話可能有token 也可能沒有\n    let token;\n    // 如果在localStorage 有user 的話就可以找到token\n    if (localStorage.getItem(\"user\")) {\n      // 得到物\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\n    } else {\n      token = \"\";\n    }\n    // axios.post 會return 一個promise，所以直接return 就好\n\n    return axios.post(API_URL, {\n      title,\n      description,\n      price\n    },\n    // token 放在第三個參數，放一個物件，物件中設定一個headers 的屬性\n    // 裡面放Authorization，裡面的值要放的就是token\n    //  這樣axios.post就會直接在header 裡面設定Authorization是JWT\n    {\n      headers: {\n        Authorization: token\n      }\n    });\n  }\n\n  // 使用學生id，找到學生註冊的課程\n  getEnrolledCourses(_id) {\n    // 這裡也要用到token，所以複製get(_id) 的程式碼\n    let token;\n    if (localStorage.getItem(\"user\")) {\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\n    } else {\n      token = \"\";\n    }\n    return axios.get(API_URL + \"/student/\" + _id, {\n      headers: {\n        Authorization: token\n      }\n    });\n  }\n\n  // 使用instructor id，來找到講師擁有的課程\n  // 同樣要get 課程的話，要先得到token\n  get(_id) {\n    let token;\n    if (localStorage.getItem(\"user\")) {\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\n    } else {\n      token = \"\";\n    }\n    // 這樣就可以在一個http request 裡面 去包含token 然後把這個token 帶到後端\n    // 後端就會去看我們的token 是不是可以使用的，然後就會根據我們的請求給予資料\n    return axios.get(API_URL + \"/instructor/\" + _id, {\n      headers: {\n        Authorization: token\n      }\n    });\n  }\n\n  // 學生找課程的功能，與server 中的courseRoute.js搭配服用\n  getCourseByName(name) {\n    // 拿到token\n    let token;\n    if (localStorage.getItem(\"user\")) {\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\n    } else {\n      token = \"\";\n    }\n\n    // get 到API\n    return axios.get(API_URL + \"/findByName/\" + name, {\n      headers: {\n        Authorization: token\n      }\n    });\n  }\n  enroll(_id) {\n    let token;\n    if (localStorage.getItem(\"user\")) {\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\n    } else {\n      token = \"\";\n    }\n    return axios.post(API_URL + \"/enroll/\" + _id, {}, {\n      headers: {\n        Authorization: token\n      }\n    });\n  }\n}\nexport default new CourseService();","map":{"version":3,"names":["axios","API_URL","CourseService","post","title","description","price","token","localStorage","getItem","JSON","parse","headers","Authorization","getEnrolledCourses","_id","get","getCourseByName","name","enroll"],"sources":["C:/Users/Yuan/Documents/udemy_2024_Web_Wilson/project9/client/src/services/course.service.js"],"sourcesContent":["// 這個 不是 React 的 class component，\r\n// 而是一個 普通的 JavaScript 類別（class），\r\n// 用來封裝跟 Course 有關的 API 呼叫邏輯，\r\n// 屬於 service 層邏輯，與 UI 無關。\r\n\r\nimport axios from \"axios\";\r\n// 要post 到course 這個api\r\nconst API_URL = \"http://localhost:8080/api/courses\";\r\n\r\nclass CourseService {\r\n  // 要製作新的課程 要給title, description, price 所以在這個CourseService 第一個可以做的動作就是post\r\n  post(title, description, price) {\r\n    // 要post 的話可能有token 也可能沒有\r\n    let token;\r\n    // 如果在localStorage 有user 的話就可以找到token\r\n    if (localStorage.getItem(\"user\")) {\r\n        // 得到物\r\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\r\n    } else {\r\n      token = \"\";\r\n    }\r\n    // axios.post 會return 一個promise，所以直接return 就好\r\n\r\n    return axios.post(\r\n      API_URL,\r\n      { title, description, price },\r\n      // token 放在第三個參數，放一個物件，物件中設定一個headers 的屬性\r\n      // 裡面放Authorization，裡面的值要放的就是token\r\n      //  這樣axios.post就會直接在header 裡面設定Authorization是JWT\r\n      {\r\n        headers: {\r\n          Authorization: token,\r\n        },\r\n      }\r\n    );\r\n  }\r\n\r\n  // 使用學生id，找到學生註冊的課程\r\n  getEnrolledCourses(_id) {\r\n    // 這裡也要用到token，所以複製get(_id) 的程式碼\r\n    let token;\r\n    if (localStorage.getItem(\"user\")) {\r\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\r\n    } else {\r\n      token = \"\";\r\n    }\r\n\r\n    return axios.get(API_URL + \"/student/\" + _id, {\r\n      headers: {\r\n        Authorization: token,\r\n      },\r\n    });\r\n  }\r\n\r\n  // 使用instructor id，來找到講師擁有的課程\r\n  // 同樣要get 課程的話，要先得到token\r\n  get(_id) {\r\n    let token;\r\n    if (localStorage.getItem(\"user\")) {\r\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\r\n    } else {\r\n      token = \"\";\r\n    }\r\n    // 這樣就可以在一個http request 裡面 去包含token 然後把這個token 帶到後端\r\n    // 後端就會去看我們的token 是不是可以使用的，然後就會根據我們的請求給予資料\r\n    return axios.get(API_URL + \"/instructor/\" + _id, {\r\n      headers: {\r\n        Authorization: token,\r\n      },\r\n    });\r\n  }\r\n\r\n  // 學生找課程的功能，與server 中的courseRoute.js搭配服用\r\n  getCourseByName(name) {\r\n    // 拿到token\r\n    let token;\r\n    if (localStorage.getItem(\"user\")) {\r\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\r\n    } else {\r\n      token = \"\";\r\n    }\r\n\r\n    // get 到API\r\n    return axios.get(API_URL + \"/findByName/\" + name, {\r\n      headers: {\r\n        Authorization: token,\r\n      },\r\n    });\r\n  }\r\n\r\n  enroll(_id) {\r\n    let token;\r\n    if (localStorage.getItem(\"user\")) {\r\n      token = JSON.parse(localStorage.getItem(\"user\")).token;\r\n    } else {\r\n      token = \"\";\r\n    }\r\n\r\n    return axios.post(\r\n      API_URL + \"/enroll/\" + _id,\r\n      {},\r\n      {\r\n        headers: {\r\n          Authorization: token,\r\n        },\r\n      }\r\n    );\r\n  }\r\n}\r\n\r\nexport default new CourseService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}